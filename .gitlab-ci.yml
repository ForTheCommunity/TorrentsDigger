stages:
  - build
  - release

image: instrumentisto/flutter

build_binaries:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    # Install Rust
    - apt update -y && apt upgrade -y
    - apt install -y curl git wget unzip
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - source "$HOME/.cargo/env"

    # Get app name and version
    - export APP_NAME=$(grep 'name:' pubspec.yaml | head -1 | awk '{print $2}' | sed 's/-/_/g' | sed 's/\r//g')
    - export APP_VERSION=$(grep 'version:' pubspec.yaml | head -1 | awk '{print $2}' | sed 's/+//' | sed 's/ /_/g' | sed 's/\r//g')
    # Setting Apk Name according to cpu architectures
    - export UNIVERSAL_APK_NAME="${APP_NAME}_${APP_VERSION}_universal.apk"
    - export ARMEABI-V7A_APK_NAME="${APP_NAME}_${APP_VERSION}_armeabi-v7a.apk"
    - export ARM64-V8A_APK_NAME="${APP_NAME}_${APP_VERSION}_arm64-v8a.apk"
    - export X86_64_APK_NAME="${APP_NAME}_${APP_VERSION}_x86_64.apk"

    # Build Android APK
    - flutter pub get
    - dart run build_runner build # [Freezed]
    # Universal Fat APK
    - flutter build apk --release
    # APK per ABI
    - flutter build apk --release --split-per-abi

    # Creating releases dir
    - mkdir releases

    # Universal APK
    # moving to releases dir
    - mv build/app/outputs/flutter-apk/app-release.apk releases
    # Rename APK
    - mv releases/app-release.apk releases/$UNIVERSAL_APK_NAME
    # Generate SHA256
    - sha256sum releases/$UNIVERSAL_APK_NAME > releases/$UNIVERSAL_APK_NAME.sha256.txt

    # ARMEABI-V7A APK
    # moving to releases dir
    - mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk releases
    # Rename APK
    - mv releases/app-armeabi-v7a-release.apk releases/$ARMEABI-V7A_APK_NAME
    # Generate SHA256
    - sha256sum releases/$ARMEABI-V7A_APK_NAME > releases/$ARMEABI-V7A_APK_NAME.sha256.txt

    # ARM64-V8A APK
    # moving to releases dir
    - mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk releases
    # Rename APK
    - mv releases/app-arm64-v8a-release.apk releases/$ARM64-V8A_APK_NAME
    # Generate SHA256
    - sha256sum releases/$ARM64-V8A_APK_NAME > releases/$ARM64-V8A_APK_NAME.sha256.txt

    # X86_64 APK
    # moving to releases dir
    - mv build/app/outputs/flutter-apk/app-x86_64-release.apk releases
    # Rename APK
    - mv releases/app-x86_64-release.apk releases/$X86_64_APK_NAME
    # Generate SHA256
    - sha256sum releases/$X86_64_APK_NAME > releases/$X86_64_APK_NAME.sha256.txt

    # Save .env for release job
    - echo "UNIVERSAL_APK_NAME=$UNIVERSAL_APK_NAME" > build.env
    - echo "ARMEABI-V7A_APK_NAME=$ARMEABI-V7A_APK_NAME" >> build.env
    - echo "ARM64-V8A_APK_NAME=$ARM64-V8A_APK_NAME" >> build.env
    - echo "X86_64_APK_NAME=$X86_64_APK_NAME" >> build.env

      # Creating AppImage
    # Installing Dependencies
    - apt-get update -y && sudo apt-get upgrade -y
    - apt-get install curl git unzip xz-utils zip libglu1-mesa  build-essential libgtk-3-dev clang cmake ninja-build pkg-config liblzma-dev -y
    - apt install file fuse -y

    # Building for linux
    - flutter config --enable-linux-desktop
    - flutter pub get
    - flutter build linux --release

    # Grepping App Name & Version.
    - export APP_NAME=$(grep 'name:' pubspec.yaml | head -1 | awk '{print $2}' | sed 's/-/_/g' | sed 's/\r//g');
    - export APPIMAGE_VERSION=$(grep 'version:' pubspec.yaml | head -1 | awk '{print $2}' | cut -c1-3);
    - export NEW_APPIMAGE_NAME="${APP_NAME}_${APP_VERSION}-x86_64.AppImage"

    # Copying release bundle to AppDir
    - mkdir "${APP_NAME}.AppDir"
    - cp -r build/linux/x64/release/bundle/ "${APP_NAME}.AppDir"

    # Creating AppRun
    - touch "${APP_NAME}.AppDir/AppRun"
    - echo -e "#!/bin/bash\ncd \"\$(dirname \"\$0\")\"\nexec ./bundle/$APP_NAME" > "${APP_NAME}.AppDir/AppRun"
    - chmod +x "${APP_NAME}.AppDir/AppRun"

    # copying icon
    - cp ./assets/icon.png "${APP_NAME}.AppDir"

    # Creating Desktop Entry for App
    - touch "${APP_NAME}.AppDir/${APP_NAME}.desktop"
    - echo -e "[Desktop Entry]\nVersion=${APPIMAGE_VERSION}\nType=Application\nTerminal=false\nName=${APP_NAME}\nExec=${APP_NAME} %u\nIcon=icon\nCategories=Utility" > "${APP_NAME}.AppDir/test_flutter_app.desktop"

    # Downloading AppImageToolKit
    - wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
    - chmod +x appimagetool-x86_64.AppImage

    # Generating AppImage
    - ./appimagetool-x86_64.AppImage  "${APP_NAME}.AppDir"

    # deleting appimagetool-x86_64.AppImage
    - rm -rfv appimagetool-x86_64.AppImage

    # Renaming & moving AppImage to releases dir
    - mv "${APP_NAME}-x86_64.AppImage" releases/$NEW_APPIMAGE_NAME

    # Generate SHA256
    - sha256sum releases/$NEW_APPIMAGE_NAME > releases/$NEW_APPIMAGE_NAME.sha256.txt

    # Save .env for release job
    - echo "NEW_APPIMAGE_NAME=$NEW_APPIMAGE_NAME" >> build.env

  artifacts:
    paths:
      - releases
      - build.env # make sure dotenv is uploaded
    reports:
      dotenv: build.env

create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_binaries
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Preparing release..."
    - . build.env # use dot instead of source for POSIX sh compatibility
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: "Release $CI_COMMIT_TAG"
    description: "Automated GitLab CI/CD release for version $CI_COMMIT_TAG"
    assets:
      links:
        # Android Universal Fat Apk
        - name: "$UNIVERSAL_APK_NAME"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$UNIVERSAL_APK_NAME?job=build_binaries"
        - name: "$UNIVERSAL_APK_NAME.sha256.txt"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$UNIVERSAL_APK_NAME.sha256.txt?job=build_binaries"
        # Android armeabi-v7a-release
        - name: "$ARMEABI-V7A_APK_NAME"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$ARMEABI-V7A_APK_NAME?job=build_binaries"
        - name: "$ARMEABI-V7A_APK_NAME.sha256.txt"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$ARMEABI-V7A_APK_NAME.sha256.txt?job=build_binaries"
        # Android arm64-v8a-release
        - name: "$ARM64-V8A_APK_NAME"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$ARM64-V8A_APK_NAME?job=build_binaries"
        - name: "$ARM64-V8A_APK_NAME.sha256.txt"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$ARM64-V8A_APK_NAME.sha256.txt?job=build_binaries"
        # Android x86_64-release
        - name: "$X86_64_APK_NAME"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$X86_64_APK_NAME?job=build_binaries"
        - name: "$X86_64_APK_NAME.sha256.txt"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/main/latest/raw/releases/$X86_64_APK_NAME.sha256.txt?job=build_binaries"
        # AppImage
        - name: "$NEW_APPIMAGE_NAME"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/$CI_COMMIT_REF_NAME/raw/releases/$NEW_APPIMAGE_NAME?job=build_binaries"
        - name: "$NEW_APPIMAGE_NAME.sha256.txt"
          url: "https://gitlab.com/$CI_PROJECT_PATH/-/jobs/artifacts/$CI_COMMIT_REF_NAME/raw/releases/$NEW_APPIMAGE_NAME.sha256.txt?job=build_binaries"
